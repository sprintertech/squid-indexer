type Transfer @entity @index(fields: ["routeID", "depositNonce"], unique: true){
  id: ID!
  status: TransferStatus!
  depositNonce: String!
  deposit: Deposit @unique
  execution: Execution @unique
  feeID: String
  fee: Fee @unique
  routeID: String
  route: Route!
  amount: String
}

type Deposit @entity {
  id: ID!
  transfer: Transfer @derivedFrom(field: "deposit")
  txHash: String!
  blockNumber: String!
  depositData: String!
  timestamp: DateTime
  handlerResponse: String!
  destination: String
  accountID: String 
  account: Account 
}

type Execution @entity {
  id: ID!
  transfer: Transfer @derivedFrom(field: "execution")
  txHash: String!
  timestamp: DateTime
  blockNumber: String!
  message: String
}

enum TransferStatus {
  pending
  executed
  failed
}

type Account @entity {
  id: ID!
  addressStatus: String
  deposits: [Deposit!] @derivedFrom(field: "account")
}

type Resource @entity {
  id: ID!
  type: String!
  tokens: [Token!] @derivedFrom(field: "resource")
}

type Token @entity @index(fields: ["tokenAddress", "domainID"], unique: true) {
  id: ID!
  decimals: Int!
  tokenAddress: String!
  tokenSymbol: String!
  resource: Resource
  resourceID: String
  domain: Domain!
  domainID: String
  fee: [Fee!] @derivedFrom(field: "token")
}

type Domain @entity {
  id: ID!
  type: String!
  name: String!
  routesFrom: [Route!] @derivedFrom(field: "fromDomain")
  routesTo: [Route!] @derivedFrom(field: "toDomain")
  token: [Token!] @derivedFrom(field: "domain")
}

type Fee @entity {
  id: ID! 
  amount: String!
  transferID: String
  transfer: Transfer
  token: Token
  tokenID: String
}


type Route @entity @index(fields: ["fromDomainID", "toDomainID", "resourceID"], unique: true) {
  id: ID!
  fromDomainID: String  
  fromDomain: Domain 

  toDomainID: String
  toDomain: Domain   

  resourceID: String
  resource: Resource
  transfers: [Transfer!] @derivedFrom(field: "route")
}